  NGPT - Next Generation POSIX Threading

  INSTALL
  =======

  Quick Guide to Install
  ----------------------

  First of all, patch your kernel so that NGPT support is present.  If you're running
  2.4.18, apply the patch-kngpt-2.4.18 patch.  This is a combined patch that includes
  all the support necessary for running NGPT 2.0.  If you're running 2.4.19, apply the
  the patch-futex-2.4.19 patch.  This patch only contains the extensions necessary for
  run NGPT 2.0 (the release of the kernel provides all the other necessary NGPT support
  by default, so a smaller patch is appropriate).  After you've patched your kernel and
  rebuilt it, reboot and you're ready to install NGPT.

  There are a number of ways to install NGPT.  There are binary rpms available for the
  IA32 (x86) platform.  If you're running on a different supported platform, you'll need
  to get either the source rpm or the source tarball and rebuild for your architecture.
  Once you've decided how you're going to install, you can pick the method from the list
  below.

  From binary rpm:  (Used if you're using the 2.4.19 patch)
	rpm -Uvh --replacefiles <binary_package_file>
	    (caution will overwrite LinuxThreads)

  From source rpm:  (Can be used for all other installations, RECOMMENDED)
	rpm --rebuild <source_package_file>
	    (caution will overwrite LinuxThreads)

  From source tarball:
	-   extract the sources
	-   mv ngpt-<release> to ngpt
	-   cd to the build directory (cd ngpt)
	-   do this:
	    -   source the build aliases (source ./.aliases)
	    -   execute the build procedure (bt install)
	    or this:
	    -	./configure
	-   make install (to install, caution: will overwrite LinuxThreads!!!)
	-   make uninstall (will restore LinuxThreads).
	-   make distclean (to save space;-)

  The script, ngptinit, is installed in the /usr/bin directory.  This script sets
  up and initializes NGPT shared memory used for POSIX shared synchronization objects.
  This should be run when your system is rebooted (or any other time you want to re-initialize
  shared memory).  We recommend that you add this command to rc.local file so that it is 
  invoked automatically when you reboot your system.

  Overview
  --------

  To install the ngpt library into /path/to/ngpt/{bin,lib,include,man}/
  perform the following steps in your shell:

    $ ./configure
       --prefix=/path/to/ngpt
      [--disable-kernel-patch-warning]
      [--enable-batch]
      [--enable-pthread]
      [--enable-debug]
      [--enable-verbose-debug]
      [--enable-profile]
      [--enable-optimize]
      [--enable-maintainer]
      [--enable-tests]
      [--enable-thread_db]
      [--enable-hp_timing]
      [--disable-shared]
      [--disable-static]
      [--enable-syscall-soft]
      [--enable-syscall-hard]
      [--with-sfio[=DIR]]
      [--with-dmalloc[=DIR]]
      [--with-mctx-mth=ID]
      [--with-mctx-dsp=ID]
      [--with-mctx-stk=ID]
    $ make
    $ make test
    $ make install

  NGPT Options
  ------------

  The supported options have the following meaning:

  --prefix=DIR: installation path prefix (default=/usr)
      This sets the path prefix of installation tree. By default this
      prefix is /usr/local. For fine-tuning the installation paths
      run `./configure --help' and watch for the various path related
      options.

  --disable-kernel-patch-warning: disable the kernel patch warning (default=no)
      This disables the warning message emitted when the library is used
      on system that does not have the recommended kernel patches applied.

  --enable-batch: build in batch mode (default=yes )
      This enables batch building. Currently this does
      nothing more than supressing some displayed hints.

  --enable-maintainer: build maintainer targets (default=yes)
      This enables some maintainer build targets.
      Not for use by end users.

  --enable-tests: build test targets (default=yes)
      This enables the building of test targets, i.e. the various
      test_xxx programs. If you don't want to build these use
      --disable-tests.

  --enable-thread_db: build libthread_db (default=yes)
      This enables the building of libthread_db that will
      in conjunction with the required gdb patch, enable you
      to use gdb to debug your programs more easily. If you don't
      want to build these use --disable-thread_db.
      CAUTION: If you build using this option, you'll need to running
      gdb 5.2 with NGPT patch applied.  You'll still be able to debug
      other application with this patched version of gdb.

  --enable-hp_timing: build with hardware TSC for time stamps (default=no)
      For architectures and processor versions that support an Interval
      Time Counter register, use this counter for time based operations.
      This replaces the gettimeofday system calls with reads of the TSC 
      register. Enabling this for a processor type and version that has
      support for it should speed up time based computations.
      CAUTION: For i386, this requires a Pentium II or later Intel 
	       processor.

  --enable-pthread: build with pthread library (default=yes)
      This enables the building and installation of the
      POSIX Threads ("pthread") API for NGPT.
      This per default forces --enable-syscall-soft.

  --enable-debug: build for debugging (default=no)
      This is for debugging NGPT and only interesting
      for developers.

  --enable-verbose-debug: build for debugging (default=no)
      This is for debugging NGPT and only interesting
      for developers.  This option generates verbose
      detailed debug information.

  --enable-profile: build for profiling (default=no)
      This enables profiling with gprof and is only
      interesting for developers.

  --enable-optimize: build with optimization (default=no)
      This enables optimization flags, mainly for GCC.

  --disable-static: build static libraries (default=no)
      This disables the building of static libraries (libxx.a).

  --disable-shared: build shared libraries (default=no)
      This disables the building of shared libraries (libxx.so).

  --enable-syscall-soft: use soft system call mapping (default=no)
      This enables the soft system call mapping for pth.h and pthread.h

  --enable-syscall-hard: use hard system call mapping (default=yes)
      This enables the hard system call mapping inside pth_syscall.c which
      means that wrappers for system calls are exported by libpth.

  --with-sfio[=DIR]
      This can be used to enable Sfio support (see pth_sfiodisc function) for
      Pth. The paths to the include and library file of Sfio has to be either
      given via CFLAGS and LDFLAGS or the DIR argument has to specify the root
      of the Sfio installation tree. Sfio can be found at
      http://www.research.att.com/sw/tools/sfio/.

  --with-dmalloc[=DIR]
      This can be used to enable Dmalloc support (debugging memory
      allocations) for NGPT. The paths to the include and library file of
      Dmalloc has to be either given via CFLAGS and LDFLAGS or the DIR
      argument has to specify the root of the Dmalloc installation tree.
      Dmalloc can be found at http://www.dmalloc.com/.

  The remaining three options are really for experts only.  They force
  particular variants for the machine context implementation.  Be carefully
  here: Not all possibly variants of the three knobs actually work (they could
  not work, even when we want!).

  --with-mctx-mth=ID       [EXPERTS ONLY]
      This forces NGPT to use a particular machine context method.
      Available variants are:
      mcsc .... makecontext(2)/swapcontext(2)
      sjlj .... setjmp(2)/longjmp(2)

  --with-mctx-dsp=ID       [EXPERTS ONLY]
      This forces NGPT to use a particular machine context dispatching
      approach. Available variants are:
      sc ...... swapcontext(2)
      ssjlj ... sigsetjmp(3)/siglongjmp(3)
      sjlj .... setjmp(3)/longjmp(3) (signal mask aware)
      usjlj ... _setjmp(3)/_longjmp(3) (signal mask aware)
      sjlje ... setjmp(3)/longjmp(3) [emulated = plus sigprocmask(2)]
      sjljlx .. setjmp(3)/longjmp(3), specific for anchient Linux version
      sjljisc . setjmp(3)/longjmp(3), specific for Interactive Unix (ISC)
      sjljw32 . setjmp(3)/longjmp(3), specific for Win32/CygWin 

  --with-mctx-stk=ID       [EXPERTS ONLY]
      This forces NGPT to use a particular machine context stack setup
      approach. Available variants are:
      none .... no standard stack setup (only for some sjljXXX above)
      mc ...... makecontext(2)
      sas ..... sigaltstack(2)
      ss ...... sigstack(2)

  Compiler Flags
  --------------

  Some systems require unusual options for compilation or linking that the
  `configure' script does not know about. You can give `configure' initial
  values for variables by setting them in the environment. Using a
  Bourne-compatible shell, you can do that on the command line like this:

    $ CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

  Or on systems that have the `env' program, you can do it like this:

    $ env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

  Compiling For Multiple Architectures
  ------------------------------------

  You can compile the package for more than one kind of computer at the same
  time, by placing the object files for each architecture in their own
  directory.  To do this, you must use a version of `make' that supports the
  `VPATH' variable, such as GNU `make'.  `cd' to the directory where you want
  the object files and executables to go and run the `configure' script.
  `configure' automatically checks for the source code in the directory that
  `configure' is in and in `..'.

  If you have to use a `make' that does not supports the `VPATH' variable, you
  have to compile the package for one architecture at a time in the source
  code directory.  After you have installed the package for one architecture,
  use `make distclean' before reconfiguring for another architecture.

  Installation Names
  ------------------

  By default, `make install' will install the package's files in
  `/usr/local/bin', `/usr/local/man', etc.  You can specify an installation
  prefix other than `/usr/local' by giving `configure' the option
  `--prefix=PATH'.

  You can specify separate installation prefixes for architecture-specific
  files and architecture-independent files.  If you give `configure' the
  option `--exec-prefix=PATH', the package will use PATH as the prefix for
  installing programs and libraries.  Documentation and other data files will
  still use the regular prefix.

  In addition, if you use an unusual directory layout you can give options
  like `--bindir=PATH' to specify different values for particular kinds of
  files.  Run `configure --help' for a list of the directories you can set and
  what kinds of files go in them.

  Specifying the System Type
  --------------------------

  There may be some features `configure' can not figure out automatically, but
  needs to determine by the type of host the package will run on.  Usually
  `configure' can figure that out, but if it prints a message saying it can
  not guess the host type, give it the `--host=TYPE' option.  TYPE can either
  be a short name for the system type, such as `sun4', or a canonical name
  with three fields: CPU-COMPANY-SYSTEM

  See the file `config.sub' for the possible values of each field.  If
  `config.sub' isn't included in this package, then this package doesn't need
  to know the host type.

  Sharing Defaults
  ----------------

  If you want to set default values for `configure' scripts to share, you can
  create a site shell script called `config.site' that gives default values
  for variables like `CC', `cache_file', and `prefix'.  `configure' looks for
  `PREFIX/share/config.site' if it exists, then `PREFIX/etc/config.site'
  if it exists.  Or, you can set the `CONFIG_SITE' environment variable to
  the location of the site script. 

