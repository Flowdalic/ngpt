##
##  NGPT - Next Generation Threading
##  Copyright (c) 2001 IBM Corporation <babt@us.ibm.com>
##  Portions Copyright (c) 1999-2000 Ralf S. Engelschall <rse@engelschall.com>
##
##  This file is part of NGPT, a non-preemptive thread scheduling
##  library which can be found at http://www.ibm.com/developer
##
##  This library is free software; you can redistribute it and/or
##  modify it under the terms of the GNU Lesser General Public
##  License as published by the Free Software Foundation; either
##  version 2.1 of the License, or (at your option) any later version.
##
##  This library is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
##  Lesser General Public License for more details.
##
##  You should have received a copy of the GNU Lesser General Public
##  License along with this library; if not, write to the Free Software
##  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
##  USA.
##
##  Makefile.in: NGPT Makefile input
##
                             # ``UNIX -- where you can do anything
                             #   in two keystrokes, or less...''
@SET_MAKE@

##
##  ____ PATH DEFINITIONS ___________________________________________
##

VPATH       = @srcdir@
srcdir      = @srcdir@
top_srcdir  = @top_srcdir@

S           = @srcdir_prefix@
C           = ./

prefix      = @prefix@
exec_prefix = @exec_prefix@
bindir      = @bindir@
libdir      = @libdir@
includedir  = @includedir@
mandir      = @mandir@
datadir     = @datadir@

##
##  ____ TOOL DEFINITIONS ___________________________________________
##

SHELL       = /bin/sh
CC          = @CC@
CPPFLAGS    = @CPPFLAGS@ -I.
CFLAGS      = @CFLAGS@
LDFLAGS     = @LDFLAGS@
LIBS        = @LIBS@
SHTOOL      = $(srcdir)/shtool
LIBTOOL     = $(C)libtool
RM          = rm -f
RMDIR       = rmdir
TRUE        = true
CAT         = cat
CP          = cp
SED         = sed
ECHO        = echo
GZIP        = gzip
GTAR        = gtar
TARDY       = tardy
POD2MAN     = pod2man
GDB         = gdb
PERL        = perl
LN	    = ln -f
TOUCH	    = touch

##
##  ____ TARGET DEFINITIONS _________________________________________
##

BATCH            = @BATCH@
PLATFORM         = @PLATFORM@
PTH_MCTX_ID      = @PTH_MCTX_ID@
PTH_STACK_GROWTH = @PTH_STACK_GROWTH@

TARGET_ALL  = @TARGET_ALL@ ngptc
TARGET_PREQ = pth_p.h
TARGET_LIBS = @LIBPTHREAD_LA@ @LIBTHREAD_DB_LA@
TARGET_MANS = @PTHREAD_CONFIG_1@ @PTHREAD_3@
TARGET_TEST = @TEST_PTHREAD@ @TEST_PTHREAD_SIG@ @TEST_PTHREAD_CANCEL@ @TEST_PTHREAD_SEGV@\
	      @TEST_CLEANUP@ @TEST_STR01@ @TEST_STR02@ @TEST_STR03@

#   object files for library generation
#   (order is just aesthically important)
LOBJS = pth_debug.lo pth_ring.lo pth_time.lo pth_errno.lo \
        pth_mctx.lo pth_tcb.lo pth_sched.lo pth_attr.lo pth_lib.lo pth_event.lo \
        pth_data.lo pth_clean.lo pth_cancel.lo pth_msg.lo pth_native.lo pth_sync.lo pth_fork.lo \
        pth_util.lo pth_high.lo pth_syscall.lo pth_ext.lo pth_compat.lo pth_string.lo @TD_MANAGER_LO@ \
	allocation.lo debug.lo pqueue.lo

#   source files for header generation
#   (order is important and has to follow dependencies in pth_p.h)
HSRCS = $(S)pth_compat.c $(S)pth_debug.c $(S)pth_syscall.c $(S)pth_errno.c $(S)pth_ring.c $(S)pth_mctx.c \
        $(S)pth_clean.c $(S)pth_time.c $(S)pth_tcb.c $(S)pth_util.c $(S)pth_event.c \
        $(S)pth_sched.c $(S)pth_data.c $(S)pth_msg.c $(S)pth_cancel.c $(S)pth_sync.c $(S)pth_attr.c $(S)pth_lib.c \
        $(S)pth_fork.c $(S)pth_high.c $(S)pth_ext.c $(S)pth_string.c $(S)pth_native.c $(S)td_manager.c \
	$(S)allocation.c $(S)pqueue.c
##
##  ____ UTILITY DEFINITIONS _________________________________________
##

_VERSION_FILE = \
	$(S)pth_vers.c

_VERSION = \
	echo "updating package version"; \
	$(SHTOOL) version -lc -n 'Next Generation POSIX Threading' -p pth_internal_ $$OPT $(_VERSION_FILE); \
	V=`$(SHTOOL) version -lc -dlong $(_VERSION_FILE)`; \
	$(SED) -e "s/Version .*(.*)/Version $$V/g" <README >README.n && mv README.n README; \
	V=`$(SHTOOL) version -lc -dshort $(_VERSION_FILE)`; \
	$(SED) -e "s/%define ver .*/%define ver $$V/g" <ngpt.spec >ngpt.spec.n && mv ngpt.spec.n ngpt.spec

_TARBALL = \
	$(SHTOOL) tarball -o $${NAME}.tar.gz -d $${NAME} -u gnu -g pth \
	                  -e 'CVS,\.cvsignore,\.configure,\.\#.*,\.[ao]$$' -c 'gzip --best' .

_MANPAGE = \
	echo "Formatting $${BASENAME}.pod into $${BASENAME}.$${SEC} via $(POD2MAN)"; \
	V1=`$(SHTOOL) version -lc -dshort $(_VERSION_FILE)`; \
	V2=`$(SHTOOL) version -lc -dlong $(_VERSION_FILE)`; \
	D=`$(SHTOOL) version -lc -dlong $(_VERSION_FILE) |\
	   $(SED) -e 's;.*(;;' -e 's;).*;;'`; \
	$(POD2MAN) --section=$${SEC} --center="$${ONELINE}" \
	           --release="$$D" --date="$${NAME} $$V1" $(S)$${BASENAME}.pod |\
	$(SED) -e "s;PTH_VERSION_STR;$$V2;" >$${BASENAME}.$${SEC}

_DEBUG = \
	core=""; \
	if [ -f $$TEST.core ]; then \
	    core="$$TEST.core"; \
    elif [ -f core ]; then \
		core="core"; \
    fi; \
	$(LIBTOOL) --mode=execute $(GDB) $$TEST $$core

##
##  ____ END USER TARGETS ____________________________________________
##

#   be aware of libtool when building the objects
.SUFFIXES:
.SUFFIXES: .c .o .lo
.c.o:
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $<
.c.lo:
	$(LIBTOOL) --mode=compile --quiet $(CC) -c $(CPPFLAGS) $(CFLAGS) $<

#   the default target
all: all-normal
all-normal: $(TARGET_ALL)
	@touch .done-all
	@$(MAKE) $(MFLAGS) what-next
all-for-install: $(TARGET_ALL)
	@touch .done-all

#   build the private shared header file
pth_p.h: $(S)pth_p.h.in
	$(SHTOOL) scpp -o pth_p.h -t $(S)pth_p.h.in -Dcpp -Cintern -M '==#==' $(HSRCS)

#   build the static and possibly shared libraries
libpthread.la: pthread.lo semaphore.lo sysconf.lo getlogin.lo sigrt.lo sys_futex.lo shared_area_file.lo $(LOBJS) libpthread.Versions
	$(LIBTOOL) --mode=link --quiet $(CC) -o libpthread.la pthread.lo semaphore.lo sysconf.lo getlogin.lo sigrt.lo sys_futex.lo shared_area_file.lo \
	$(LOBJS) -rpath $(libdir) -version-info `$(SHTOOL) version -lc -dlibtool $(_VERSION_FILE)`

#  build libthread_db
libthread_db.la:
	cd thread_db; $(MAKE) libthread_db.la

#   build the manual pages
$(S)pthread-config.1: $(S)pthread-config.pod $(_VERSION_FILE)
	@BASENAME="pthread-config"; SEC=1; \
	NAME="NGPT"; ONELINE="NGPT: Next Generation POSIX Threading"; \
	$(_MANPAGE)
$(S)pthread.3: $(S)pthread.pod $(_VERSION_FILE)
	@BASENAME="pthread"; SEC=3; \
	NAME="NGPT"; ONELINE="NGPT: Next Generation POSIX Threading"; \
	$(_MANPAGE)

#   build ngptc program
ngptc:	ngptc.o shared_area_file.o
	$(LIBTOOL) --mode=link --quiet $(CC) $(LDFLAGS) -o ngptc ngptc.o shared_area_file.o

#   build test program
test_pthread: test_pthread.o test_common.o @TEST_LINKLIB@
	$(LIBTOOL) --mode=link --quiet $(CC) $(LDFLAGS) -o test_pthread test_pthread.o test_common.o @TEST_LINKLIB@ $(LIBS)
test_pthread_sig: test_pthread_sig.o @TEST_LINKLIB@
	$(LIBTOOL) --mode=link --quiet $(CC) $(LDFLAGS) -o test_pthread_sig test_pthread_sig.o @TEST_LINKLIB@ $(LIBS)
test_pthread_cancel: test_pthread_cancel.o @TEST_LINKLIB@
	$(LIBTOOL) --mode=link --quiet $(CC) $(LDFLAGS) -o test_pthread_cancel test_pthread_cancel.o @TEST_LINKLIB@ $(LIBS)
test_pthread_segv: test_pthread_segv.o @TEST_LINKLIB@
	$(LIBTOOL) --mode=link --quiet $(CC) $(LDFLAGS) -o test_pthread_segv test_pthread_segv.o @TEST_LINKLIB@ $(LIBS)
test_cleanup: test_cleanup.o @TEST_LINKLIB@
	$(LIBTOOL) --mode=link --quiet $(CC) $(LDFLAGS) -o test_cleanup test_cleanup.o @TEST_LINKLIB@ $(LIBS)
test_str01: test_str01.o @TEST_LINKLIB@
	$(LIBTOOL) --mode=link --quiet $(CC) $(LDFLAGS) -o test_str01 test_str01.o @TEST_LINKLIB@ $(LIBS)
test_str02: test_str02.o @TEST_LINKLIB@
	$(LIBTOOL) --mode=link --quiet $(CC) $(LDFLAGS) -o test_str02 test_str02.o @TEST_LINKLIB@ $(LIBS)
test_str03: test_str03.o test_str03c.o @TEST_LINKLIB@
	$(LIBTOOL) --mode=link --quiet $(CC) $(LDFLAGS) -o test_str03 test_str03.o @TEST_LINKLIB@ $(LIBS)
	$(LIBTOOL) --mode=link --quiet $(CC) $(LDFLAGS) -o test_str03c test_str03c.o $(LIBS)

#   RPM install the package
rpm-install: all-for-install
	@$(MAKE) $(MFLAGS) install-dirs @INSTALL_PTHREAD@ @INSTALL_THREAD_DB@
	@touch .done-rpm-install
	@$(MAKE) $(MFLAGS) what-next

#   install the package
install: all-for-install
	@$(MAKE) $(MFLAGS) install-dirs install-backup @INSTALL_PTHREAD@ \
			   @INSTALL_THREAD_DB@
	@touch .done-install
	@$(MAKE) $(MFLAGS) what-next
install-dirs:
	$(SHTOOL) mkdir -f -p -m 755 $(prefix)
	$(SHTOOL) mkdir -f -p -m 755 $(prefix)/../lib
	$(SHTOOL) mkdir -f -p -m 755 $(bindir)
	$(SHTOOL) mkdir -f -p -m 755 $(includedir)
	$(SHTOOL) mkdir -f -p -m 755 $(includedir)/bits
	$(SHTOOL) mkdir -f -p -m 755 $(libdir)
	$(SHTOOL) mkdir -f -p -m 755 $(mandir)/man1
	$(SHTOOL) mkdir -f -p -m 755 $(mandir)/man3
	$(SHTOOL) mkdir -f -p -m 755 $(datadir)/aclocal
install-backup:
	$(SHTOOL) mkdir -f -p -m 755 $(includedir)/.ngpt-backup
	$(SHTOOL) mkdir -f -p -m 755 $(includedir)/.ngpt-backup/include
	$(SHTOOL) mkdir -f -p -m 755 $(includedir)/.ngpt-backup/include/bits
	$(SHTOOL) mkdir -f -p -m 755 $(includedir)/.ngpt-backup/lib
	@if [ ! -f $(includedir)/.ngpt-backup/.done-backup ]; then \
	    $(CP) $(includedir)/pthread.h $(includedir)/.ngpt-backup/include  ; \
	    $(CP) $(includedir)/semaphore.h $(includedir)/.ngpt-backup/include  ; \
	    $(CP) $(includedir)/bits/pthreadtypes.h $(includedir)/.ngpt-backup/include/bits  ; \
	    $(CP) $(includedir)/bits/sigthread.h $(includedir)/.ngpt-backup/include/bits ; \
	    $(CP) $(includedir)/bits/local_lim.h $(includedir)/.ngpt-backup/include/bits ; \
	    $(CP) $(includedir)/bits/posix_opt.h $(includedir)/.ngpt-backup/include/bits ; \
	    $(CP) $(libdir)/libpthread.a $(includedir)/.ngpt-backup/lib ; \
	    $(CP) $(libdir)/libpthread.so $(includedir)/.ngpt-backup/lib ; \
	    $(TOUCH) $(includedir)/.ngpt-backup/.done-backup ; \
	fi
install-pthread: 
	$(SHTOOL) install -c -m 755 pthread-config $(bindir)/pthread-config
	$(SHTOOL) install -c -m 755 ngptc $(bindir)/ngptc
	$(SHTOOL) install -c -m 755 ngptinit $(bindir)/ngptinit
	$(SHTOOL) install -c -m 644 $(S)pthread-config.1 $(mandir)/man1/pthread-config.1
	$(SHTOOL) install -c -m 644 pth.h $(includedir)/pth.h
	$(SHTOOL) install -c -m 644 pth_p.h $(includedir)/pth_p.h
	$(SHTOOL) install -c -m 644 pthread.h $(includedir)/pthread.h
	$(SHTOOL) install -c -m 644 semaphore.h $(includedir)/semaphore.h
	$(SHTOOL) install -c -m 644 pthreadtypes.h $(includedir)/bits/pthreadtypes.h
	$(SHTOOL) install -c -m 644 sigthread.h $(includedir)/bits/sigthread.h
	$(SHTOOL) install -c -m 644 local_lim.h $(includedir)/bits/local_lim.h
	$(SHTOOL) install -c -m 644 posix_opt.h $(includedir)/bits/posix_opt.h
	$(SHTOOL) install -c -m 644 $(S)pthread.3 $(mandir)/man3/pthread.3
	@umask 022; $(LIBTOOL) --mode=install \
	$(SHTOOL) install -c libpthread.la $(libdir)/libpthread.la
	(cd $(libdir) && ln -f -s libpthread.so libpthread.so.0)
install-thread_db:
	(cd thread_db; $(MAKE) install-thread_db)
#
# Leave this commented out until we have better binary compatibility.
#	(cd $(libdir)/../../lib && cp -f $(libdir)/libpthread.so libpthread-0.9.so && ln -f -s libpthread-0.9.so libpthread.so.0)
#

#   uninstall the package
uninstall:
	@if [ -f $(includedir)/.ngpt-backup/.done-backup ]; then \
	    $(MAKE) $(MFLAGS) @UNINSTALL_PTHREAD@ @UNINSTALL_THREAD_DB@ \
			uninstall-dirs uninstall-restore; \
	    touch .done-uninstall; \
	    $(MAKE) $(MFLAGS) what-next; \
	fi
uninstall-pthread:
	$(RM) $(bindir)/pthread-config
	$(RM) $(bindir)/ngptc
	$(RM) $(bindir)/ngptinit
	$(RM) $(mandir)/man1/pthread-config.1
	$(RM) $(includedir)/pthread.h
	$(RM) $(includedir)/semaphore.h
	$(RM) $(includedir)/bits/pthreadtypes.h
	$(RM) $(includedir)/bits/sigthread.h
	$(RM) $(includedir)/bits/local_lim.h
	$(RM) $(includedir)/bits/posix_opt.h
	$(RM) $(includedir)/pth_p.h
	$(RM) $(includedir)/pth.h
	$(RM) $(mandir)/man3/pthread.3
	@$(LIBTOOL) --mode=uninstall $(RM) $(libdir)/libpthread.la 
	$(RM) $(libdir)/libpthread.so.0
uninstall-thread_db:
	cd thread_db; $(MAKE) uninstall
uninstall-dirs:
	-$(RMDIR) $(datadir)/aclocal >/dev/null 2>&1 || $(TRUE)
	-$(RMDIR) $(datadir) >/dev/null 2>&1 || $(TRUE)
	-$(RMDIR) $(mandir)/man1 >/dev/null 2>&1 || $(TRUE)
	-$(RMDIR) $(mandir)/man3 >/dev/null 2>&1 || $(TRUE)
	-$(RMDIR) $(mandir) >/dev/null 2>&1 || $(TRUE)
	-$(RMDIR) $(libdir) >/dev/null 2>&1 || $(TRUE)
	-$(RMDIR) $(includedir) >/dev/null 2>&1 || $(TRUE)
	-$(RMDIR) $(bindir) >/dev/null 2>&1 || $(TRUE)
	-$(RMDIR) $(prefix) >/dev/null 2>&1 || $(TRUE)
uninstall-restore: 
	@if [ -f $(includedir)/.ngpt-backup/.done-backup ]; then \
	    $(CP) $(includedir)/.ngpt-backup/include/pthread.h $(includedir) ; \
	    $(CP) $(includedir)/.ngpt-backup/include/semaphore.h $(includedir) ; \
	    $(CP) $(includedir)/.ngpt-backup/include/bits/pthreadtypes.h $(includedir)/bits  ; \
	    $(CP) $(includedir)/.ngpt-backup/include/bits/sigthread.h $(includedir)/bits ; \
	    $(CP) $(includedir)/.ngpt-backup/include/bits/local_lim.h $(includedir)/bits ; \
	    $(CP) $(includedir)/.ngpt-backup/include/bits/posix_opt.h $(includedir)/bits ; \
	    $(CP) $(includedir)/.ngpt-backup/lib/libpthread.a  $(libdir) ; \
	fi
	-$(RM) -r $(includedir)/.ngpt-backup >/dev/null 2>&1 || $(TRUE)
	(cd $(libdir) && ln -f -s /lib/libpthread.so.0 $(libdir)/libpthread.so)
uninstall-restore-thread_db:
	(cd thread_db; $(MAKE) uninstall-restore)

#   clean the source tree for re-building
clean:	@CLEAN_THREAD_DB@
	$(RM) $(TARGET_PREQ)
	$(RM) $(TARGET_TEST)
	$(RM) $(TARGET_LIBS)
	$(RM) $(TARGET_MANS)
	$(RM) ngptc test_str03c test_str03m
	$(RM) core *.core *.bak *~ *.map cscope.out
	$(RM) *.o *.lo
	$(RM) .libs/*
	-$(RMDIR) .libs >/dev/null 2>&1 || $(TRUE)
	$(RM) .done-*

clean-thread_db:
	(cd thread_db; $(MAKE) clean)

#   clean the source tree for re-configuring and re-building
distclean: clean @DISTCLEAN_THREAD_DB@
	$(RM) -rf autom4te-2.53.cache
	$(RM) Makefile
	$(RM) pth_acdef.h pth_acmac.h pth.h local_lim.h posix_opt.h
	$(RM) pthread-config pthread.h
	$(RM) ngptinit
	$(RM) config.log config.cache config.status
	$(RM) -r striptease.dir
	$(RM) libtool

distclean-thread_db:
	(cd thread_db; $(MAKE) distclean)

#   clean the source tree by removing really all generate stuff
realclean: distclean
	$(RM) $(TARGET_MANS)

#   give hints what to do as the next step
what-next:
	-@if [ ".$(BATCH)" != .yes ]; then \
	    if [ ".$(WHEN)" != . ]; then \
	        when="$(WHEN)"; \
	    else \
	        when="Now"; \
	    fi; \
	    echo ""; \
	    if [ ! -f .done-all ]; then \
	        cmd=`$(SHTOOL) echo -e "%Bmake%b"`; \
	        echo "$$when please type \`$$cmd' to compile. Good luck."; \
	    elif [ ! -f .done-test ]; then \
	        cmd=`$(SHTOOL) echo -e "%Bmake test%b"`; \
	        echo "$$when please type \`$$cmd' to run a quick test suite. Hope it works."; \
	    elif [ ! -f .done-install ]; then \
	        cmd=`$(SHTOOL) echo -e "%Bmake install%b"`; \
	        echo "$$when please type \`$$cmd' to install the package."; \
	    elif [ ! -f .done-uninstall ]; then \
	        cmd=`$(SHTOOL) echo -e "%Bmake uninstall%b"`; \
	        echo "$$when use the package (you can remove it later via \`$$cmd')."; \
	        cmd=`$(SHTOOL) echo -e "%Becho \"subscribe ngpt-users\" | mail ngpt-users-request@ibm.com%b"`; \
	        echo "Additionally you should consider subscribing to the NGPT support"; \
	        echo "mailing list ngpt-users@ibm.com by running the following command:"; \
	        echo "\`$$cmd'"; \
	    else \
	        echo "$$when there is nothing more you can do here... ;)"; \
	        echo "There is just \`make clean' left for you."; \
	    fi; \
	    echo ""; \
	fi

#   execute and debug one of the test programs
test: test-std
test-std: test_pthread
	-@./ngptc; \
	./test_pthread; \
	if [ $$? -eq 0 ]; then \
	    touch .done-test; \
	    if [ ".`grep $(PLATFORM) $(S)PORTING`" = . ]; then \
	        VERSION=`$(SHTOOL) version -lc -dshort $(_VERSION_FILE)`; \
	        echo "Please send the following summary line via Email to the author"; \
	        echo "Bill Abt <babt@us.ibm.com> for inclusion into"; \
	        echo "the list of successfully tested platforms (see PORTING file):"; \
	        echo ""; \
	        $(SHTOOL) echo -e "NGPT: %BOK%b: %B$(PLATFORM)%b | %B$(PTH_MCTX_ID)%b | %B$(PTH_STACK_GROWTH)%b | %B$$VERSION%b"; \
	        $(MAKE) $(MFLAGS) what-next WHEN="Then"; \
	    else \
	        $(MAKE) $(MFLAGS) what-next WHEN="Now"; \
	    fi; \
	    exit 0; \
	else \
	    VERSION=`$(SHTOOL) version -lc -dshort $(_VERSION_FILE)`; \
	    echo "Please send the following summary line together with details about"; \
	    $(SHTOOL) echo -e "the configuration (%Bpth_acdef.h%b, %Bpth_acmac.h%b, %Bconfig.status%b, %Bconfig.log%b)"; \
	    echo "and build/test steps (output of 'make' and 'make test') to the author"; \
	    echo "Bill Abt <babt@us.ibm.com> to help him in tracking"; \
	    echo "down your platform problem."; \
	    echo ""; \
	    $(SHTOOL) echo -e "NGPT: %BFAILED%b: %B$(PLATFORM)%b | %B$(PTH_MCTX_ID)%b | %B$(PTH_STACK_GROWTH)%b | %B$$VERSION%b"; \
	    echo ""; \
	    exit 1; \
	fi
test-pthread: test_pthread
	./test_pthread
test-pthread_sig: test_pthread_sig
	./test_pthread_sig
test-pthread_cancel: test_pthread_cancel
	./test_pthread_cancel
test-pthread_segv: test_pthread_segv
	./test_pthread_segv
test-cancel: test_cleanup
	./test_cleanup
test-str01: test_str01
	./test_str01
test-str02: test_str02
	./test_str02
test-str03: test_str03
	./test_str03


#   GNU compat targets
check: test
installcheck:
installdirs: install-dirs
install-strip: install
mostlyclean: clean
maintainer-clean: realclean
info:
dvi:
TAGS:

##
##  ____ DEVELOPER TARGETS ___________________________________________
##  (THIS IS NOT INTENDED TO BE RUN BY END USERS)
##

#   fixup the permissions in the source tree
fixperm:
	@echo "Fixing permissions in source tree"
	@$(SHTOOL) fixperm *

#   update Autoconf files
update-autoconf: configure pth_acdef.h.in
configure: configure.in
	$(RM) configure
	autoconf
pth_acdef.h.in: configure.in acconfig.h acheader.m4
	$(RM) pth_acdef.h.in
	cat acheader.m4 configure.in | autoheader - >pth_acdef.h.in

#   update build tools
update-tools:
	@$(RM) shtool ltmain.sh ltconfig
	@$(MAKE) $(MFLAGS) shtool ltmain.sh ltconfig
shtool:
	shtoolize -o shtool echo version scpp mkdir install fixperm tarball
ltmain.sh:
	@F=`libtoolize -n -c -f | grep 'cp.*ltmain.sh' |\
	    $(SED) -e 's;[^/]*;;' -e 's; .*;;'`; \
	$(ECHO) "ltmain.sh <-- $$F"; cat $$F |\
	$(SED) -e 's:/bin/sh; then:/bin/sh || test ".`$(ECHO) $$nonopt | grep shtool`" != .;then:' \
	    -e 's:exec \$$SHELL \$$0 --finish:exit 0 #:' >ltmain.sh
ltconfig:
	@F=`libtoolize -n -c -f | grep 'cp.*ltconfig' | $(SED) -e 's;[^/]*;;' -e 's; .*;;'`; \
	$(ECHO) "ltconfig <-- $$F"; $(CAT) $$F >ltconfig

#   debug the test programs
debug: debug-pthread
debug-pthread: test_pthread
	TEST=test_pthread && $(_DEBUG)
debug-pthread_sig: test_pthread_sig
	TEST=test_pthread_sig && $(_DEBUG)
debug-pthread_cancel: test_pthread_cancel
	TEST=test_pthread_cancel && $(_DEBUG)
debug-pthread_segv: test_pthread_segv
	TEST=test_pthread_segv && $(_DEBUG)
debug-cancel: test_cleanup
	TEST=test_cleanup && $(_DEBUG)
debug-str01: test_str01
	TEST=test_str01 && $(_DEBUG)
debug-str02: test_str02
	TEST=test_str02 && $(_DEBUG)
debug-str03: test_str03
	TEST=test_str03 && $(_DEBUG)


#   roll the release or snapshot tarball
dist: distclean fixperm
	@V=`$(SHTOOL) version -l c -d short $(_VERSION_FILE)`; NAME="ngpt-$$V"; \
	$(ECHO) "Rolling RELEASE tarball $$NAME.tar.gz"; $(_TARBALL)
snap: distclean fixperm
	@V=`$(SHTOOL) version -l c -d short $(_VERSION_FILE)`; NAME="ngpt-$$V-SNAP"; \
	$(ECHO) "Rolling SNAPSHOT tarball $$NAME.tar.gz"; $(_TARBALL)

#   increase or update version information
new-version:
	@V="$(VERSION)"; \
	if [ ".$$V" != . ]; then \
		OPT="-s$$V"; \
	else \
		OPT="-e"; \
	fi; \
	$(_VERSION)
update-version:
	@OPT="-s`$(SHTOOL) version -lc -dshort $(_VERSION_FILE)`" && $(_VERSION)

#   make a striptease
striptease:
	@$(PERL) striptease.pl

#   create dependencies
depend:
	$(CP) Makefile.in Makefile.in.bak \
	&& $(SED) -ne '1,/^# DO NOT REMOVE/p' Makefile.in > Makefile.new \
	&& $(CC) -MM $(CPPFLAGS) $(CFLAGS) *.c |\
	   $(SED) -e 's/^\(pth_.*\)\.o:/\1.lo:/' >> Makefile.new \
	&& $(CP) Makefile.new Makefile.in \
	&& $(RM) Makefile.new

##
##  ____ DEPENDENCY AREA ____________________________________________
##  (AUTOMATICALLY UPDATED - DO NOT EDIT)
##

$(LOBJS): Makefile

# DO NOT REMOVE
getlogin.o: getlogin.c pthread.h pth_p.h futex.h pth_vers.c pth.h \
  pth_acdef.h pth_acmac.h thread_db/thread_db.h useldt.h
ngptc.o: ngptc.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h pth_acmac.h \
  thread_db/thread_db.h useldt.h
pth_attr.lo: pth_attr.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_cancel.lo: pth_cancel.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h td_manager.h
pth_clean.lo: pth_clean.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_compat.lo: pth_compat.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_data.lo: pth_data.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_debug.lo: pth_debug.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_errno.lo: pth_errno.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_event.lo: pth_event.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_ext.lo: pth_ext.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_fork.lo: pth_fork.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_high.lo: pth_high.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h td_manager.h
pth_lib.lo: pth_lib.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h td_manager.h
pth_mctx.lo: pth_mctx.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_msg.lo: pth_msg.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_native.lo: pth_native.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_pqueue.lo: pth_pqueue.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pthread.o: pthread.c pthread.h pth_p.h futex.h pth_vers.c pth.h \
  pth_acdef.h pth_acmac.h thread_db/thread_db.h useldt.h td_manager.h
pth_ring.lo: pth_ring.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_sched.lo: pth_sched.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h td_manager.h
pth_string.lo: pth_string.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_sync.lo: pth_sync.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_syscall.lo: pth_syscall.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_tcb.lo: pth_tcb.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_time.lo: pth_time.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_util.lo: pth_util.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
pth_vers.lo: pth_vers.c pth_vers.c
semaphore.o: semaphore.c pthread.h pth_p.h futex.h pth_vers.c pth.h \
  pth_acdef.h pth_acmac.h thread_db/thread_db.h useldt.h semaphore.h
shared_area_file.o: shared_area_file.c
sigrt.o: sigrt.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h pth_acmac.h \
  thread_db/thread_db.h useldt.h
sysconf.o: sysconf.c pthread.h pth_p.h futex.h pth_vers.c pth.h \
  pth_acdef.h pth_acmac.h thread_db/thread_db.h useldt.h
sys_futex.o: sys_futex.c pth_p.h futex.h pth_vers.c pth.h pth_acdef.h \
  pth_acmac.h thread_db/thread_db.h useldt.h
td_manager.o: td_manager.c pthread.h pth_p.h futex.h pth_vers.c pth.h \
  pth_acdef.h pth_acmac.h thread_db/thread_db.h useldt.h td_manager.h \
  semaphore.h
test_atfork.o: test_atfork.c pthread.h
test_cleanup.o: test_cleanup.c pthread.h
test_common.o: test_common.c pth.h test_common.h
test_pthread.o: test_pthread.c pthread.h
test_pthread_cancel.o: test_pthread_cancel.c pthread.h
test_pthread_segv.o: test_pthread_segv.c pthread.h
test_pthread_sig.o: test_pthread_sig.c pthread.h
test_str01.o: test_str01.c pthread.h test_str.h
test_str02.o: test_str02.c pthread.h
test_str03.o: test_str03.c pthread.h
test_str03c.o: test_str03c.c pthread.h

TAGS:
	find -iname \*.h.in -o -iname \*.[ch] | etags - 
